// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v3.20.3
// source: proto/users.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "users";

export interface User {
  id: string;
  name: string;
  email: string;
  password: string;
  role: string;
}

export interface Users {
  Users: User[];
}

export interface CreateUserDto {
  name: string;
  email: string;
  password: string;
}

export interface EditUserDto {
  id: string;
  name: string;
  email: string;
  password: string;
  role: string;
}

export interface GetUserDto {
  id: string;
}

export interface DeleteUserDto {
  id: string;
}

export interface Empty {
}

export const USERS_PACKAGE_NAME = "users";

export interface UsersServiceClient {
  createUser(request: CreateUserDto): Observable<User>;

  getUsers(request: Empty): Observable<Users>;

  getUser(request: GetUserDto): Observable<User>;

  editUser(request: EditUserDto): Observable<User>;

  deleteUser(request: DeleteUserDto): Observable<User>;
}

export interface UsersServiceController {
  createUser(request: CreateUserDto): Promise<User> | Observable<User> | User;

  getUsers(request: Empty): Promise<Users> | Observable<Users> | Users;

  getUser(request: GetUserDto): Promise<User> | Observable<User> | User;

  editUser(request: EditUserDto): Promise<User> | Observable<User> | User;

  deleteUser(request: DeleteUserDto): Promise<User> | Observable<User> | User;
}

export function UsersServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createUser", "getUsers", "getUser", "editUser", "deleteUser"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UsersService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UsersService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USERS_SERVICE_NAME = "UsersService";
