// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v3.20.3
// source: proto/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

export interface RefreshToken {
  refreshToken: string;
}

export interface RefreshDto {
  refreshToken: string;
}

export interface ActivateDto {
  activationLink: string;
}

export interface LogoutDto {
  refreshToken: string;
}

export interface RegLogDto {
  email: string;
  password: string;
}

export interface Tokens {
  accessToken: string;
  refreshToken: string;
}

export interface Empty {
}

export const AUTH_PACKAGE_NAME = "auth";

export interface AuthServiceClient {
  registration(request: RegLogDto): Observable<Tokens>;

  login(request: RegLogDto): Observable<Tokens>;

  logout(request: LogoutDto): Observable<RefreshToken>;

  activate(request: ActivateDto): Observable<Empty>;

  refresh(request: RefreshDto): Observable<Tokens>;
}

export interface AuthServiceController {
  registration(request: RegLogDto): Promise<Tokens> | Observable<Tokens> | Tokens;

  login(request: RegLogDto): Promise<Tokens> | Observable<Tokens> | Tokens;

  logout(request: LogoutDto): Promise<RefreshToken> | Observable<RefreshToken> | RefreshToken;

  activate(request: ActivateDto): Promise<Empty> | Observable<Empty> | Empty;

  refresh(request: RefreshDto): Promise<Tokens> | Observable<Tokens> | Tokens;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["registration", "login", "logout", "activate", "refresh"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
